'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _collect = require('./collect');

var _collect2 = _interopRequireDefault(_collect);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var runOnAllFiles = void 0;

exports.default = {
  rules: {
    'show-errors': function showErrors(context) {
      return {
        Program: function Program() {
          var onTheFly = true;
          var collected = void 0;

          if (onTheFly) {
            var stdin = context.getSourceCode().getText();
            var root = process.cwd();

            // Check to see if we should run on every file
            if (runOnAllFiles === undefined) {
              try {
                runOnAllFiles = _fs2.default.readFileSync(_path2.default.join(root, '.flowconfig')).toString().includes('all=true');
              } catch (err) {
                runOnAllFiles = false;
              }
            }

            if (stdin) {
              if (runOnAllFiles === false) {
                // `String.prototype.includes` is an O(n) operation :(
                if (!stdin.includes('@flow')) {
                  return true;
                }
              }
            }

            collected = (0, _collect2.default)(stdin, root, context.getFilename());
          } else {
            collected = (0, _collect2.default)();
          }

          var pluginErrors = Array.isArray(collected) ? onTheFly ? collected : collected.filter(function (each) {
            return each.path === context.getFilename();
          }) : [];

          pluginErrors.forEach(function (_ref) {
            var loc = _ref.loc,
                message = _ref.message;

            context.report({
              loc: loc,
              message: message
            });
          });
        }
      };
    }
  }
};
module.exports = exports['default'];